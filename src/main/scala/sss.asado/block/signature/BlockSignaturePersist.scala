package sss.asado.block.signature

import org.joda.time.DateTime
import sss.db.{Db, Where}

/**
  * Created by alan on 4/1/16.
  */

trait BlockSignatures {
  def add(nodeId: String)
  def indexOfBlockSignature(nodeId: String): Option[Int]
}

object BlockSignatures {

  def apply(height: Long)(implicit db: Db): BlockSignatures = new BlockSignaturePersister(height)

  private class BlockSignaturePersister(height: Long)(implicit db: Db) extends BlockSignatures {

    private lazy val tableName = s"block_sigs_$height"

    private def createTableSql =
      s"""CREATE TABLE IF NOT EXISTS $tableName
          |(id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
          |nodeId VARCHAR(100),
          |created_dt BIGINT,
          |PRIMARY KEY(nodeId));
          |""".stripMargin

    private lazy val table = {
      db.executeSql(createTableSql)
      db.table(tableName)
    }

    override def add(nodeId: String) = {
      table.insert(Map("nodeId" -> nodeId, "created_dt" -> DateTime.now.getMillis))
    }

    override def indexOfBlockSignature(nodeId: String): Option[Int] = {
      table.find(Where("nodeId = ?", nodeId)) map( r => r[Int]("id"))
    }

  }
}
