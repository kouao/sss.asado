package sss.asado.account

import org.joda.time.DateTime
import scorex.crypto.signatures.SigningFunctions.PublicKey
import sss.db.{Db, Row, Where}

/**
  * Created by alan on 4/22/16.
  */
trait AccountManager {

  def matches(nodeId: String, publicKey: PublicKey): Boolean
  def link(nodeId: String, publicKey: PublicKey)
  def nodeId(publicKey: PublicKey): Option[String]
  def unlink(nodeId: String, publicKey: PublicKey): Boolean
  def account(nodeId: String): PublicKeyAccount
  def accounts(nodeId: String): Seq[PublicKeyAccount]
  def accountOpt(nodeId: String): Option[PublicKeyAccount]
}

object AccountManager {

  private val nodeIdStr = "nodeId"
  private val createdStr = "created_dt"
  private val publicKeyStr = "public_key"

  import sss.asado.util.ByteArrayVarcharOps._

  def apply()(implicit db:Db): AccountManager = new AccountManager {

    private val tableName = "accounts"

    private def createTableSql =
      s"""CREATE TABLE IF NOT EXISTS $tableName
          |(id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
          |$nodeIdStr VARCHAR(100),
          |$publicKeyStr VARCHAR(100),
          |$createdStr BIGINT,
          |PRIMARY KEY($nodeIdStr, $publicKeyStr));
          |""".stripMargin

    private lazy val table = {
      db.executeSql(createTableSql)
      db.table(tableName)
    }

    override def matches(nodeId: String, publicKey: PublicKey): Boolean = {
      val asChars = publicKey.toVarChar
      table.find(Where(s"$nodeIdStr = ? AND $publicKeyStr = ? ", nodeId, asChars)).isDefined
    }

    override def unlink(nodeId: String, publicKey: PublicKey): Boolean = {
      val asChars = publicKey.toVarChar
      table.delete(Where(s"$nodeIdStr = ? AND $publicKeyStr = ? ", nodeId, asChars)) == 1
    }

    override def link(nodeId: String, publicKey: PublicKey): Unit = {
      val asChars = publicKey.toVarChar
      table.insert(Map(nodeIdStr -> nodeId, publicKeyStr -> asChars, createdStr -> DateTime.now.getMillis))
    }

    override def accountOpt(nodeId: String): Option[PublicKeyAccount] = accounts(nodeId).headOption

    override def account(nodeId: String): PublicKeyAccount = accounts(nodeId).head


    override def accounts(nodeId: String): Seq[PublicKeyAccount] = {
      table.filter(Where(s"$nodeIdStr = ? ORDER BY $createdStr DESC", nodeId)) map { r: Row =>
        PublicKeyAccount((r("public_key").toByteArray))
      }
    }

    override def nodeId(publicKey: PublicKey): Option[String] = {
      val asChars = publicKey.toVarChar
      table.find(Where(s"$publicKeyStr = ? ", asChars)).map(_[String](nodeIdStr))
    }

  }
}
